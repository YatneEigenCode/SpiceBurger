Ancestree=function (){  //v0.94 enableCloser() 3069 and Spiceburger
  var kw=["ok! ","tmp_tcq.csv"];
  this.start= function(at){
    var tops=[], tab= new StoTab(), sky=new Ftu();
    tab.getAsset(kw[1]);
    for (var z=1,i=1,ap=tab.asset; (i<ap.length) && z; i++)
      if ( (ap[i].length>1) && (z=(ap[i][0]!="")) )
        sky.addCh( new Ftu(ap[i]) ).init(ap[0]);
    for (var r,i=0; i<sky.ach.length; i++)
      if (r=sky.ach[i].findParents(sky.ach,i))
        tops.push(r);
    var tb, au= new AppTool();
    (tb= au.addEl("table")).border=1;
    tb.insertRow(0).insertCell(0).ftu= tops[0];
    for (var r=0,isZ=0; !isZ; r++)
      isZ= !(tops[0].showRow( tb, r ));
    return kw[0]+sky.ach.length;
  }

  var CollapseTool= function(){
    var ato= new AppTool(), kw=["&#9637;","&#x2630;","<br>"];
    this.prep= function(ce){
      if (ce.ftu.ach.length==0) return;
      var el=ato.addEl("div",ce);
      el.innerHTML= kw[(ce.ftu.isCollapsed)? 1:0];
      el.onclick= this.handleClick;
      el.onmouseover= this.bgGrey;
      el.onmouseout= this.bgWhite;
    }
    var bgbn= function(cn,el){ el.style.backgroundColor=cn;}
    this.bgWhite= function(){ bgbn("white",this) }
    this.bgGrey= function(){ bgbn("lightgrey",this) }
    this.handleClick= function(){
      var tb, od= this.parentNode.ftu;
      od.isCollapsed= !od.isCollapsed;
      this.innerHTML= kw[(od.isCollapsed)? 1:0];
      tb= this.parentNode.parentNode.parentNode;
      var ft0= tb.rows[0].cells[0].ftu, n=tb.rows.length;
      while (tb.rows.length>1) tb.deleteRow(1);
      var nIgnore= (tb.isClosable)? 2:1;
      for (var i=0; i<n-nIgnore; i++)
        ft0.showRow(tb,i);
      tb.isClosable= 0;
    }
    this.formatCollapsedCh= function(ce,ach){
      ce.colSpan= 1;
      var res= "";
      for (var i=0; i<ach.length; i++)
        res+= ach[i].name+kw[2];
      ce.innerHTML= res;
    }
  }
  var cot= new CollapseTool();

  var Ftu= function(at){
    var kw=["<br>","&#9746;"];
    this.data= at;
    this.ach= [];
    this.dh= {};
    this.init= function(labels){
      if (!this.data) return;
      var ab= (labels)? labels : [];
      this.name= this.data[0];
      this.parent1= this.data[1];
      this.parent2= this.data[2];
      this.yob= this.data[3];
      this.spouse= this.data[4];
      this.asp=[];
      for (var i=0; (i<ab.length) && (i<this.data.length); i++)
        this.dh[ab[i]]= this.data[i];
    }
    this.addCh= function(ftu){
      this.ach.push(ftu);
      this.ach.sort( function(a,b){return (a.yob>b.yob)?1:-1} );
      ftu.isLeaf= 1;
      return ftu;
    }
    this.findParents= function(at,i){
      for (var j=0,x=this.isLeaf=0; j<at.length; j++)
        if (i==j) {}
        else {
          if (at[j].name==this.spouse)
            this.addSpouse( at[i].addSpouse(this) );
          if (at[j].name==this.parent1) at[j].addCh(this)
          else if (at[j].name==this.parent2) at[j].addCh(this);
        }
      return (this.isLeaf)? null : this;
    }
    this.addSpouse= function(ftu){
      this.asp.push(ftu);
      return this;
    }
    this.getDeepChCount= function(){
      var res= this.ach.length;
      for (var i=0; i<this.ach.length; i++)
        res+= this.ach[i].getDeepChCount();
      return res;
    }
    this.formatCell= function(ce){
      ce.innerHTML= this.name+kw[0]+this.yob+kw[0]+this.dh.addl;
      ce.align="center";
      ce.colSpan= this.getSpanDeep();
      cot.prep(ce);
    }
    this.getSpanDeep= function(){
      if (this.isCollapsed) return 1;
      var n=this.ach.length, res=0;
      for (var i=0; i<n; i++) 
        res +=this.ach[i].getSpanDeep();
      return (res)? res : 1;
    }
    this.enableCloser= function(tb){
      tb.rows[0].cells[0].onmouseover= function(){
        var cc, tb= this.parentNode.parentNode;
        if (tb.isClosable) return;
        (cc=tb.insertRow().insertCell()).innerHTML= kw[1];
        cc.onclick= function(){
          var tb= this.parentNode.parentNode.parentNode;
          tb.parentNode.removeChild(tb);
        }
        tb.isClosable= 1;
      }
    }
    this.showRow= function( tb, r ){
      var res=0, nr= tb.insertRow( );
      if (r==0) this.enableCloser(tb);
      for (var ftu,i=0,at=tb.rows[r].cells; i<at.length; i++) {
        var ftu=at[i].ftu;
        if (ftu) { 
          ftu.formatCell(at[i]);
          if (!ftu.isCollapsed) {
            for (var j=0,ap=ftu.ach; j<ap.length; j++)
              nr.insertCell().ftu= ap[j];
            if (ftu.ach.length==0) nr.insertCell();
            res |= (ftu.ach.length>0);
          } else {
            cot.formatCollapsedCh(nr.insertCell(),ftu.ach);
          }
        } else 
          nr.insertCell();
      }
console.log( "showRow -res", r, res );
      return res;
    }
  }
}
FamTree= Ancestree;
//evaljs-ok
